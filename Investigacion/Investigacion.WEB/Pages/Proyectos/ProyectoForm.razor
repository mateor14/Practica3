@page "/Proyectos/form"
@inject SweetAlertService swal
@inject NavigationManager navigationManager

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />


    <div class="mb-3">
        <label>Nombre:</label>
        <div>
            <InputText @bind-Value="Proyecto.Nombre"></InputText>
            <ValidationMessage For="@(() => Proyecto.Nombre)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Descripción:</label>
        <div>
            <InputText @bind-Value="Proyecto.Descripcion"></InputText>
            <ValidationMessage For="@(() => Proyecto.Descripcion)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha Inicio:</label>
        <div>
            <InputDate @bind-Value="Proyecto.Fecha_Inicio"></InputDate>
            <ValidationMessage For="@(() => Proyecto.Fecha_Inicio)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha De Finalización Estimada:</label>
        <div>
            <InputDate @bind-Value="Proyecto.Fecha_Fin_Estimada"></InputDate>
            <ValidationMessage For="@(() => Proyecto.Fecha_Fin_Estimada)" />
        </div>
    </div>

    <!-- Agrega más campos según sea necesario -->

    <button class="btn btn-primary" type="submit"><i class="bi bi-floppy" /> Guardar Cambios</button>
    <button class="btn btn-info" type="reset"><i class="bi bi-x-circle" /> Limpiar</button>
    <button class="btn btn-success" @onclick="ReturnAction"><i class="bi bi-arrow-left" /> Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new (Proyecto);
    }

    [Parameter]
    [EditorRequired]
    public Proyecto Proyecto { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormularioPosteadoConExito { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormularioPosteadoConExito)

        {

            return;

        }

        var resultado = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }


}
